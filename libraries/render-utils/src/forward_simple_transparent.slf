<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  forward_simple_transparent.frag
//  fragment shader
//
//  Created by Andrzej Kapolka on 9/15/14.
//  Copyright 2014 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//
<@include DefaultMaterials.slh@>

<@include ForwardGlobalLight.slh@>
<$declareEvalGlobalLightingAlphaBlended()$>

// the interpolated normal
in vec3 _normalWS;
in vec3 _normalMS;
in vec4 _color;
in vec2 _texCoord0;
in vec4 _positionMS;
in vec4 _positionES;

// For retro-compatibility
#define _normal      _normalWS
#define _modelNormal _normalMS
#define _position    _positionMS
#define _eyePosition _positionES

layout(location = 0) out vec4 _fragColor0;

//PROCEDURAL_COMMON_BLOCK

#line 1001
//PROCEDURAL_BLOCK

#line 2030
void main(void) {
    vec3 normal = normalize(_normalWS.xyz);
    vec3 diffuse = _color.rgb;
    vec3 specular = DEFAULT_SPECULAR;
    float shininess = DEFAULT_SHININESS;
    float emissiveAmount = 0.0;
    TransformCamera cam = getTransformCamera();

#ifdef PROCEDURAL

#if defined(PROCEDURAL_V1)
    specular = getProceduralColor().rgb;
    // Procedural Shaders are expected to be Gamma corrected so let's bring back the RGB in linear space for the rest of the pipeline
    //specular = pow(specular, vec3(2.2));
    emissiveAmount = 1.0;
#elif defined(PROCEDURAL_V2)
    emissiveAmount = getProceduralColors(diffuse, specular, shininess);
#elif defined(PROCEDURAL_V3)
    vec4 position = cam._viewInverse * _positionES;
    ProceduralData proceduralData = {
        position.xyz,
        normal,
        vec3(0.0),
        DEFAULT_SPECULAR,
        DEFAULT_EMISSIVE,
        1.0,
        DEFAULT_ROUGHNESS,
        DEFAULT_METALLIC,
        DEFAULT_OCCLUSION,
        DEFAULT_SCATTERING
    };
    getProceduralColors(proceduralData);
    position = vec4(proceduralData.position, 1.0);
    vec4 posEye = cam._view * position;
    _fragColor0 = vec4(evalGlobalLightingAlphaBlendedWithHaze(
        cam._viewInverse,
        1.0,
        proceduralData.occlusion,
        posEye,
        proceduralData.normal,
        proceduralData.diffuse,
        proceduralData.specular,
        proceduralData.metallic,
        proceduralData.emissive,
        proceduralData.roughness,
        proceduralData.alpha), proceduralData.alpha);
    vec4 posClip = cam._projection * posEye;
    float far = gl_DepthRange.far;
    float near = gl_DepthRange.near;
    gl_FragDepth = 0.5 * ((far - near) * posClip.z / posClip.w + near + far);
#endif

#endif

#ifndef PROCEDURAL_V3
    vec3 fragPosition = _positionES.xyz;
    if (emissiveAmount > 0.0) {
        _fragColor0 = vec4(evalGlobalLightingAlphaBlendedWithHaze(
            cam._viewInverse,
            1.0,
            DEFAULT_OCCLUSION,
            fragPosition,
            normal,
            specular,
            DEFAULT_FRESNEL,
            DEFAULT_METALLIC,
            DEFAULT_EMISSIVE,
            DEFAULT_ROUGHNESS, _color.a),
            _color.a);
    } else {
        _fragColor0 = vec4(evalGlobalLightingAlphaBlendedWithHaze(
            cam._viewInverse,
            1.0,
            DEFAULT_OCCLUSION,
            fragPosition,
            normal,
            diffuse,
            DEFAULT_FRESNEL,
            DEFAULT_METALLIC,
            DEFAULT_EMISSIVE,
            DEFAULT_ROUGHNESS, _color.a),
            _color.a);
    }
#endif
}
